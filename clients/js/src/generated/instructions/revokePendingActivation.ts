/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type RevokePendingActivationInstruction<
  TProgram extends string = typeof SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS,
  TAccountFeature extends string | IAccountMeta<string> = string,
  TAccountIncinerator extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFeature extends string
        ? WritableSignerAccount<TAccountFeature> &
            IAccountSignerMeta<TAccountFeature>
        : TAccountFeature,
      TAccountIncinerator extends string
        ? WritableAccount<TAccountIncinerator>
        : TAccountIncinerator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RevokePendingActivationInstructionData = { discriminator: number };

export type RevokePendingActivationInstructionDataArgs = {};

export function getRevokePendingActivationInstructionDataEncoder(): Encoder<RevokePendingActivationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getRevokePendingActivationInstructionDataDecoder(): Decoder<RevokePendingActivationInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getRevokePendingActivationInstructionDataCodec(): Codec<
  RevokePendingActivationInstructionDataArgs,
  RevokePendingActivationInstructionData
> {
  return combineCodec(
    getRevokePendingActivationInstructionDataEncoder(),
    getRevokePendingActivationInstructionDataDecoder()
  );
}

export type RevokePendingActivationInput<
  TAccountFeature extends string = string,
  TAccountIncinerator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The feature account to revoke */
  feature: TransactionSigner<TAccountFeature>;
  /** The incinerator account */
  incinerator: Address<TAccountIncinerator>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getRevokePendingActivationInstruction<
  TAccountFeature extends string,
  TAccountIncinerator extends string,
  TAccountSystemProgram extends string,
>(
  input: RevokePendingActivationInput<
    TAccountFeature,
    TAccountIncinerator,
    TAccountSystemProgram
  >
): RevokePendingActivationInstruction<
  typeof SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS,
  TAccountFeature,
  TAccountIncinerator,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feature: { value: input.feature ?? null, isWritable: true },
    incinerator: { value: input.incinerator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.feature),
      getAccountMeta(accounts.incinerator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRevokePendingActivationInstructionDataEncoder().encode({}),
  } as RevokePendingActivationInstruction<
    typeof SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS,
    TAccountFeature,
    TAccountIncinerator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRevokePendingActivationInstruction<
  TProgram extends string = typeof SOLANA_FEATURE_GATE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The feature account to revoke */
    feature: TAccountMetas[0];
    /** The incinerator account */
    incinerator: TAccountMetas[1];
    /** The system program */
    systemProgram: TAccountMetas[2];
  };
  data: RevokePendingActivationInstructionData;
};

export function parseRevokePendingActivationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRevokePendingActivationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      feature: getNextAccount(),
      incinerator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRevokePendingActivationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
