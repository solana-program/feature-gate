/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedRevokePendingActivationInstruction } from '../instructions';

export const SOLANA_FEATURE_GATE_PROGRAM_ADDRESS =
  'Feature111111111111111111111111111111111111' as Address<'Feature111111111111111111111111111111111111'>;

export enum SolanaFeatureGateInstruction {
  RevokePendingActivation,
}

export function identifySolanaFeatureGateInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaFeatureGateInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolanaFeatureGateInstruction.RevokePendingActivation;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaFeatureGate instruction.'
  );
}

export type ParsedSolanaFeatureGateInstruction<
  TProgram extends string = 'Feature111111111111111111111111111111111111',
> = {
  instructionType: SolanaFeatureGateInstruction.RevokePendingActivation;
} & ParsedRevokePendingActivationInstruction<TProgram>;
