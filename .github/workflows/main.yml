name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 18
  SOLANA_VERSION: 1.18.12

jobs:
  format_and_lint:
    name: Format & lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        library: [programs, client-rust, client-js]
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          clippy: true
          node: ${{ env.NODE_VERSION }}
          rustfmt: true
          protoc: true

      - name: Format ${{ matrix.library }}
        run: |
          if [ "${{ matrix.library }}" == "programs" ]; then
            pnpm programs:format -- --check
          elif [ "${{ matrix.library }}" == "client-rust" ]; then
            pnpm clients:rust:format -- --check
          elif [ "${{ matrix.library }}" == "client-js" ]; then
            pnpm clients:js:format
          fi
      
      - name: Lint ${{ matrix.library }}
        run: |
          if [ "${{ matrix.library }}" == "programs" ]; then
            pnpm programs:lint -Zunstable-options --features bpf-entrypoint,test-sbf -- --deny=warnings --deny=clippy::arithmetic_side_effects
          elif [ "${{ matrix.library }}" == "client-rust" ]; then
            pnpm clients:rust:lint -Zunstable-options -- --deny=warnings
          elif [ "${{ matrix.library }}" == "client-js" ]; then
            pnpm clients:js:lint
          fi

  build_programs:
    name: Build programs
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Build programs
        run: pnpm programs:build --features bpf-entrypoint

      - name: Upload program builds
        uses: actions/upload-artifact@v4
        with:
          name: program-builds
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save all builds for clients
        uses: actions/cache/save@v4
        with:
          path: ./**/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}
  
  check_generation:
    name: Check IDL & client generation
    runs-on: ubuntu-latest
    needs: format_and_lint
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          node: ${{ env.NODE_VERSION }}
          rustfmt: true

      - name: Generate IDLs
        run: |
          pnpm generate:idls
          git status --porcelain
          test -z "$(git status --porcelain)"
      
      - name: Generate clients
        run: |
          pnpm generate:clients
          git status --porcelain
          test -z "$(git status --porcelain)"
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build_programs, check_generation]
    strategy:
      matrix:
        library: [programs, client-rust, client-js]
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-programs
          protoc: true
          node: ${{ env.NODE_VERSION }}
          solana: ${{ env.SOLANA_VERSION }}

      - name: Test ${{ matrix.library }}
        run: |
          if [ "${{ matrix.library }}" == "programs" ]; then
            pnpm programs:test --features bpf-entrypoint
          elif [ "${{ matrix.library }}" == "client-rust" ]; then
            pnpm clients:rust:test
          elif [ "${{ matrix.library }}" == "client-js" ]; then
            pnpm clients:js:test
          fi
